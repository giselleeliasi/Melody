Melody {
  Program     = Composition+

  Composition = NoteDecl
              | ScaleDecl
              | MelodyDecl
              | Note ("++" | "--") ";"   --transpose
              | Note "=" Chord ";"       --assign
              | Note_play ";"            --play
              | rest ";"                 --rest
              | return Chord ";"         --return
              | return ";"               --shortreturn
              | Harmony
              | Rhythm

  NoteDecl    = (let | const) id "=" Chord ";"
  ScaleDecl   = scale id "{" Interval* "}"
  Interval    = id ":" Pitch
  MelodyDecl  = melody id Signature (":" Pitch)? Composition
  Signature   = "(" ListOf<Instrument, ","> ")"
  Instrument  = id ":" Pitch

  Pitch       = Pitch "?"                    --optional
              | "[" Pitch "]"                 --chord
              | "(" ListOf<Pitch, ","> ")" "->" Pitch  --progression
              | id                            --id

  Harmony     = if Chord Composition else Composition  --fullharmony
              | if Chord Composition else Harmony      --modulation
              | if Chord Composition                 --simpleharmony
  Rhythm      = while Chord Composition             --loop
              | repeat Chord Composition            --repeat
              | for id in Chord ("..." | "..<") Chord Composition  --range
              | for id in Chord Composition         --groove
  Composition = "{" Composition+ "}"

  Chord       = Chord1 "?" Chord1 ":" Chord  --conditional
              | Chord1
  Chord1      = Chord1 "??" Chord2           --fallback
              | Chord2
  Chord2      = Chord3 ("||" Chord3)+        --or
              | Chord3 ("&&" Chord3)+        --and
              | Chord3
  Chord3      = Chord4 ("|" Chord4)+         --union
              | Chord4 ("^" Chord4)+         --dissonance
              | Chord4 ("&" Chord4)+         --consonance
              | Chord4
  Chord4      = Chord5 ("<="|"<"|"=="|"!="|">="|">") Chord5  --compare
              | Chord5
  Chord5      = Chord5 ("<<" | ">>") Chord6  --shift
              | Chord6
  Chord6      = Chord6 ("+" | "-") Chord7    --add
              | Chord7
  Chord7      = Chord7 ("*"| "/" | "%") Chord8  --multiply
              | Chord8
  Chord8      = Chord9 "**" Chord8          --power
              | Chord9
              | ("#" | "-" | "!" | some | random) Chord9  --unary
  Chord9      = true ~mod
              | false ~mod
              | beatlit ~mod
              | notelit ~mod
              | rest Pitch ~mod           --emptyrest
              | Chord9 ("(" | "?(") ListOf<Chord, ","> ")" ~mod  --play
              | Chord9 ("[" | "?[") Chord "]"  --transpose
              | Chord9 ("." | "?.") id    --member
              | lyriclit ~mod
              | id                        --id
              | Pitch_chord "(" ")" ~mod  --emptychord
              | "[" NonemptyListOf<Chord, ","> "]" ~mod  --chordexp
              | "(" Chord ")" ~mod        --parens

  notelit     = note+
  beatlit     = beat+ "." beat+ (("E" | "e") ("+" | "-")? beat+)?
  lyriclit    = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\")  --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}"  --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit
  mod         = ~"==" "=" | "++" | "--"

  let         = "let" ~alnum
  const       = "const" ~alnum
  scale       = "scale" ~alnum
  melody      = "melody" ~alnum
  if          = "if" ~alnum
  else        = "else" ~alnum
  while       = "while" ~alnum
  repeat      = "repeat" ~alnum
  for         = "for" ~alnum
  in          = "in" ~alnum
  random      = "random" ~alnum
  rest        = "rest" ~alnum
  return      = "return" ~alnum
  some        = "some" ~alnum
  no          = "no" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  keyword     = let | const | scale | melody | if | else | while | repeat
              | for | in | rest | return | some | no | random | true | false
  id          = ~keyword letter alnum*

  space      += "â™«" (~"\n" any)*  --comment
}
