import { describe, it } from "node:test";
import assert from "node:assert/strict";
import parse from "../src/parser.js";

// Programs expected to be syntactically correct
const syntaxChecks = [
<<<<<<< HEAD
  ["simplest syntactically correct program", "break;"],
  ["multiple statements", "print(1);\nbreak;\nx=5; return; return;"],
  ["variable declarations", "let e=99*1;\nconst z=false;"],
  ["type declarations", "struct S {x:T1 y:T2 z:bool}"],
  ["function with no params, no return type", "function f() {}"],
  ["function with one param", "function f(x: int) {}"],
  ["function with two params", "function f(x: int, y: boolean) {}"],
  ["function with no params + return type", "function f(): int {}"],
  ["function types in params", "function f(g: (int)->boolean) {}"],
  ["function types returned", "function f(): (int)->(int)->void {}"],
  ["array type for param", "function f(x: [[[boolean]]]) {}"],
  ["array type returned", "function f(): [[int]] {}"],
  ["optional types", "function f(c: int?): float {}"],
  ["assignments", "a--; c++; abc=9*3; a=1;"],
  ["complex var assignment", "c(5)[2] = 100;c.p.r=1;c.q(8)[2](1,1).z=1;"],
  ["complex var bumps", "c(5)[2]++;c.p.r++;c.q(8)[2](1,1).z--;"],
  ["call in statement", "let x = 1;\nf(100);\nprint(1);"],
  ["call in exp", "print(5 * f(x, y, 2 * y));"],
  ["short if", "if true { print(1); }"],
  ["longer if", "if true { print(1); } else { print(1); }"],
  ["even longer if", "if true { print(1); } else if false { print(1);}"],
  ["while with empty block", "repeatWhile true {}"],
  ["while with one statement block", "repeatWhile true { let x = 1; }"],
  ["repeat with long block", "repeat 2 { print(1);\nprint(2);print(3); }"],
  ["if inside loop", "repeat 3 { if true { print(1); } }"],
  ["for closed range", "for i in 2...9*1 {}"],
  ["for half-open range", "for i in 2..<9*1 {}"],
  ["for collection-as-id", "for i in things {}"],
  ["for collection-as-lit", "for i in [3,5,8] {}"],
  ["conditional", "return x?y:z?y:p;"],
  ["??", "return a ?? b ?? c ?? d;"],
  ["ors can be chained", "print(1 || 2 || 3 || 4 || 5);"],
  ["ands can be chained", "print(1 && 2 && 3 && 4 && 5);"],
  ["bitwise ops", "return (1|2|3) + (4^5^6) + (7&8&9);"],
  ["relational operators", "print(1<2||1<=2||1==2||1!=2||1>=2||1>2);"],
  ["shifts", "return 3 << 5 >> 8 << 13 >> 21;"],
  ["arithmetic", "return 2 * x + 3 / 5 - -1 % 7 ** 3 ** 3;"],
  ["length", "return #c; return #[1,2,3];"],
  ["boolean literals", "let x = false || true;"],
  ["all numeric literal forms", "print(8 * 89.123 * 1.3E5 * 1.3E+5 * 1.3E-5);"],
  ["empty array literal", "print([int]());"],
  ["nonempty array literal", "print([1, 2, 3]);"],
  ["some operator", "return some dog;"],
  ["no operator", "return no dog;"],
  ["random operator", "return random [1, 2, 3];"],
  ["parentheses", "print(83 * ((((((((-(13 / 21))))))))) + 1 - 0);"],
  ["variables in expression", "return r.p(3,1)[9]?.x?.y.z.p()(5)[1];"],
  ["more variables", "return c(3).p?.oh(9)[2][2].nope(1)[3](2);"],
  ["indexing array literals", "print([1,2,3][1]);"],
  ["member expression on string literal", `print("hello".append("there"));`],
  ["non-Latin letters in identifiers", "let „Ç≥„É≥„Éë„Ç§„É© = 100;"],
  ["a simple string literal", 'print("helloüòâüò¨üíÄüôÖüèΩ‚Äç‚ôÄÔ∏è‚Äî`");'],
  ["string literal with escapes", 'return "a\\n\\tbc\\\\de\\"fg";'],
  ["u-escape", 'print("\\u{a}\\u{2c}\\u{1e5}\\u{ae89}\\u{1f4a9}\\u{10ffe8}");'],
  ["end of program inside comment", "print(0); // yay"],
  ["comments with no text", "print(1);//\nprint(0);//"],
=======
  ["simplest syntactically correct program", "rest;"],
  ["multiple statements", "C4++;\nrest;\nA4 = G4; return;"],
  ["variable declarations", "let note1 = C4;\nconst chord1 = [C4, E4, G4];"],
  ["scale declarations", "scale major {root: C4 third: E4 fifth: G4}"],
  ["melody declarations", "melody songA(piano: C4, violin: G4) { rest; }"],
  ["melody with return type", "melody songB(piano: C4): D4 { return C4; }"],
  ["note transposition", "C4++; D4--;"],
  ["chord assignments", "C4 = [C4, E4, G4];"],
  ["note play statements", "C4(piano); G4.play();"],
  ["rest statements", "rest;"],
  ["return statements", "return [C4, E4, G4];"],
  ["simple if", "if C4 { D4++; }"],
  ["if-else", "if C4 { D4++; } else { E4--; }"],
  ["if-else chain", "if C4 { D4++; } else if E4 { F4--; }"],
  ["while loop", "while C4 { D4++; }"],
  ["repeat loop", "repeat C4 { D4++; }"],
  ["for range closed", "for note in C4...G4 { note++; }"],
  ["for range half-open", "for note in C4..<G4 { note++; }"],
  ["for in collection", "for note in [C4, D4, E4] { note++; }"],
  ["conditional expressions", "return C4 ? D4 : E4;"],
  ["fallback operator", "return C4 ?? D4 ?? E4;"],
  ["logical operators", "return C4 && D4 || E4;"],
  ["chord operations", "return [C4, E4] & [E4, G4] | [G4, B4];"],
  ["comparison operators", "if C4 < D4 && E4 >= F4 { rest; }"],
  ["shift operations", "return C4 << 2 >> 1;"],
  ["arithmetic", "return C4 + D4 * E4 / F4 % G4 ** 2;"],
  ["unary operators", "return #[C4, E4, G4]; return -C4; return !D4;"],
  ["numeric literals", "return 440.0E-3;"],
  ["chord literals", "return [C4, E4, G4];"],
  ["some operator", "return some [C4, D4, E4];"],
  ["random operator", "return random [C4, D4, E4];"],
  ["nested expressions", "return (C4 + D4) * (E4 - F4);"],
  ["method calls", "C4.transpose(2).play();"],
  ["string literals", 'print("‚ô™ Hello Music ‚ô´");'],
  ["comments", "C4++; ‚ô´ transpose up\nD4--; ‚ô´ transpose down"],
>>>>>>> f98cb88b0dc3b13e4397d4392cfd497ae1a8e61f
];

// Programs with syntax errors that the parser will detect
const syntaxErrors = [
<<<<<<< HEAD
  ["non-letter in an identifier", "let abüò≠c = 2;", /Line 1, col 7:/],
  ["malformed number", "let x= 2.;", /Line 1, col 10:/],
  ["a float with an E but no exponent", "let x = 5E * 11;", /Line 1, col 10:/],
  ["a missing right operand", "print(5 -);", /Line 1, col 10:/],
  ["a non-operator", "print(7 * ((2 _ 3));", /Line 1, col 15:/],
  ["an expression starting with a )", "return );", /Line 1, col 8:/],
  ["a statement starting with expression", "x * 5;", /Line 1, col 3:/],
  ["an illegal statement on line 2", "print(5);\nx * 5;", /Line 2, col 3:/],
  ["a statement starting with a )", "print(5);\n)", /Line 2, col 1:/],
  ["an expression starting with a *", "let x = * 71;", /Line 1, col 9:/],
  ["negation before exponentiation", "print(-2**2);", /Line 1, col 10:/],
  ["mixing ands and ors", "print(1 && 2 || 3);", /Line 1, col 15:/],
  ["mixing ors and ands", "print(1 || 2 && 3);", /Line 1, col 15:/],
  ["associating relational operators", "print(1 < 2 < 3);", /Line 1, col 13:/],
  ["while without braces", "repeatWhile true\nprint(1);", /Line 2, col 1/],
  ["if without braces", "if x < 3\nprint(1);", /Line 2, col 1/],
  ["while as identifier", "let for = 3;", /Line 1, col 5/],
  ["if as identifier", "let if = 8;", /Line 1, col 5/],
  ["unbalanced brackets", "function f(): int[;", /Line 1, col 18/],
  ["empty array without type", "print([]);", /Line 1, col 8/],
  ["random used like a function", "print(random(1,2));", /Line 1, col 15/],
  ["bad array literal", "print([1,2,]);", /Line 1, col 12/],
  ["empty subscript", "print(a[]);", /Line 1, col 9/],
  ["true is not assignable", "true = 1;", /Line 1, col 5/],
  ["false is not assignable", "false = 1;", /Line 1, col 6/],
  ["numbers cannot be subscripted", "print(500[x]);", /Line 1, col 10/],
  ["numbers cannot be called", "print(500(x));", /Line 1, col 10/],
  ["numbers cannot be dereferenced", "print(500 .x);", /Line 1, col 11/],
  ["no-paren function type", "function f(g:int->int) {}", /Line 1, col 17/],
  ["string lit with unknown escape", 'print("ab\\zcdef");', /col 11/],
  ["string lit with newline", 'print("ab\\zcdef");', /col 11/],
  ["string lit with quote", 'print("ab\\zcdef");', /col 11/],
  ["string lit with code point too long", 'print("\\u{1111111}");', /col 17/],
=======
  ["invalid note name", "let H4 = C4;", /Line 1, col 5:/],
  ["malformed number", "440.", /Line 1, col 4:/],
  ["missing operand", "C4 + ;", /Line 1, col 5:/],
  ["invalid operator", "C4 $ D4;", /Line 1, col 4:/],
  ["unmatched parenthesis", "return (C4;", /Line 1, col 10:/],
  ["invalid statement", "C4 D4;", /Line 1, col 4:/],
  ["missing braces", "if C4\nD4++;", /Line 2, col 1/],
  ["keywords as identifiers", "let if = C4;", /Line 1, col 5/],
  ["empty chord without type", "[];", /Line 1, col 2/],
  ["invalid chord literal", "[C4, D4,];", /Line 1, col 9/],
  ["empty note index", "C4[];", /Line 1, col 4/],
  ["invalid note reference", "440[C4];", /Line 1, col 4/],
  ["number as function", "440(C4);", /Line 1, col 4/],
  ["invalid string escape", '"\\z"', /Line 1, col 3/],
  ["unterminated string", '"music', /Line 1, col 6/],
  ["invalid unicode escape", '"\\u{GGGGG}"', /Line 1, col 10/],
>>>>>>> f98cb88b0dc3b13e4397d4392cfd497ae1a8e61f
];

describe("The parser", () => {
  for (const [scenario, source] of syntaxChecks) {
    it(`matches ${scenario}`, () => {
      assert(parse(source).succeeded());
    });
  }
  for (const [scenario, source, errorMessagePattern] of syntaxErrors) {
    it(`throws on ${scenario}`, () => {
      assert.throws(() => parse(source), errorMessagePattern);
    });
  }
});
